// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/selector/selector.go

// Package mockselector is a generated GoMock package.
package mockselector

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/traas-stack/chaosmeta/chaosmeta-inject-operator/api/v1alpha1"
	model "github.com/traas-stack/chaosmeta/chaosmeta-inject-operator/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIAnalyzer is a mock of IAnalyzer interface.
type MockIAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockIAnalyzerMockRecorder
}

// MockIAnalyzerMockRecorder is the mock recorder for MockIAnalyzer.
type MockIAnalyzerMockRecorder struct {
	mock *MockIAnalyzer
}

// NewMockIAnalyzer creates a new mock instance.
func NewMockIAnalyzer(ctrl *gomock.Controller) *MockIAnalyzer {
	mock := &MockIAnalyzer{ctrl: ctrl}
	mock.recorder = &MockIAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnalyzer) EXPECT() *MockIAnalyzerMockRecorder {
	return m.recorder
}

// GetDeploymentListByLabel mocks base method.
func (m *MockIAnalyzer) GetDeploymentListByLabel(ctx context.Context, namespace string, label map[string]string) ([]*model.DeploymentObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentListByLabel", ctx, namespace, label)
	ret0, _ := ret[0].([]*model.DeploymentObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentListByLabel indicates an expected call of GetDeploymentListByLabel.
func (mr *MockIAnalyzerMockRecorder) GetDeploymentListByLabel(ctx, namespace, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentListByLabel", reflect.TypeOf((*MockIAnalyzer)(nil).GetDeploymentListByLabel), ctx, namespace, label)
}

// GetDeploymentListByName mocks base method.
func (m *MockIAnalyzer) GetDeploymentListByName(ctx context.Context, namespace string, name []string) ([]*model.DeploymentObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentListByName", ctx, namespace, name)
	ret0, _ := ret[0].([]*model.DeploymentObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentListByName indicates an expected call of GetDeploymentListByName.
func (mr *MockIAnalyzerMockRecorder) GetDeploymentListByName(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentListByName", reflect.TypeOf((*MockIAnalyzer)(nil).GetDeploymentListByName), ctx, namespace, name)
}

// GetExperimentListByPhase mocks base method.
func (m *MockIAnalyzer) GetExperimentListByPhase(ctx context.Context, phase string) (*v1alpha1.ExperimentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentListByPhase", ctx, phase)
	ret0, _ := ret[0].(*v1alpha1.ExperimentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentListByPhase indicates an expected call of GetExperimentListByPhase.
func (mr *MockIAnalyzerMockRecorder) GetExperimentListByPhase(ctx, phase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentListByPhase", reflect.TypeOf((*MockIAnalyzer)(nil).GetExperimentListByPhase), ctx, phase)
}

// GetNodeListByLabel mocks base method.
func (m *MockIAnalyzer) GetNodeListByLabel(ctx context.Context, label map[string]string, containerName string) ([]*model.NodeObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeListByLabel", ctx, label, containerName)
	ret0, _ := ret[0].([]*model.NodeObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeListByLabel indicates an expected call of GetNodeListByLabel.
func (mr *MockIAnalyzerMockRecorder) GetNodeListByLabel(ctx, label, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeListByLabel", reflect.TypeOf((*MockIAnalyzer)(nil).GetNodeListByLabel), ctx, label, containerName)
}

// GetNodeListByNodeIP mocks base method.
func (m *MockIAnalyzer) GetNodeListByNodeIP(ctx context.Context, nodeIP []string, containerName string) ([]*model.NodeObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeListByNodeIP", ctx, nodeIP, containerName)
	ret0, _ := ret[0].([]*model.NodeObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeListByNodeIP indicates an expected call of GetNodeListByNodeIP.
func (mr *MockIAnalyzerMockRecorder) GetNodeListByNodeIP(ctx, nodeIP, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeListByNodeIP", reflect.TypeOf((*MockIAnalyzer)(nil).GetNodeListByNodeIP), ctx, nodeIP, containerName)
}

// GetNodeListByNodeName mocks base method.
func (m *MockIAnalyzer) GetNodeListByNodeName(ctx context.Context, nodeName []string, containerName string) ([]*model.NodeObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeListByNodeName", ctx, nodeName, containerName)
	ret0, _ := ret[0].([]*model.NodeObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeListByNodeName indicates an expected call of GetNodeListByNodeName.
func (mr *MockIAnalyzerMockRecorder) GetNodeListByNodeName(ctx, nodeName, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeListByNodeName", reflect.TypeOf((*MockIAnalyzer)(nil).GetNodeListByNodeName), ctx, nodeName, containerName)
}

// GetPod mocks base method.
func (m *MockIAnalyzer) GetPod(ctx context.Context, ns, podName, containerName string) (*model.PodObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", ctx, ns, podName, containerName)
	ret0, _ := ret[0].(*model.PodObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockIAnalyzerMockRecorder) GetPod(ctx, ns, podName, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockIAnalyzer)(nil).GetPod), ctx, ns, podName, containerName)
}

// GetPodListByLabel mocks base method.
func (m *MockIAnalyzer) GetPodListByLabel(ctx context.Context, namespace string, label map[string]string, containerName string) ([]*model.PodObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodListByLabel", ctx, namespace, label, containerName)
	ret0, _ := ret[0].([]*model.PodObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodListByLabel indicates an expected call of GetPodListByLabel.
func (mr *MockIAnalyzerMockRecorder) GetPodListByLabel(ctx, namespace, label, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodListByLabel", reflect.TypeOf((*MockIAnalyzer)(nil).GetPodListByLabel), ctx, namespace, label, containerName)
}

// GetPodListByLabelInNode mocks base method.
func (m *MockIAnalyzer) GetPodListByLabelInNode(ctx context.Context, namespace string, label map[string]string, nodeIP string) ([]*model.PodObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodListByLabelInNode", ctx, namespace, label, nodeIP)
	ret0, _ := ret[0].([]*model.PodObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodListByLabelInNode indicates an expected call of GetPodListByLabelInNode.
func (mr *MockIAnalyzerMockRecorder) GetPodListByLabelInNode(ctx, namespace, label, nodeIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodListByLabelInNode", reflect.TypeOf((*MockIAnalyzer)(nil).GetPodListByLabelInNode), ctx, namespace, label, nodeIP)
}

// GetPodListByPodName mocks base method.
func (m *MockIAnalyzer) GetPodListByPodName(ctx context.Context, namespace string, podName []string, containerName string) ([]*model.PodObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodListByPodName", ctx, namespace, podName, containerName)
	ret0, _ := ret[0].([]*model.PodObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodListByPodName indicates an expected call of GetPodListByPodName.
func (mr *MockIAnalyzerMockRecorder) GetPodListByPodName(ctx, namespace, podName, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodListByPodName", reflect.TypeOf((*MockIAnalyzer)(nil).GetPodListByPodName), ctx, namespace, podName, containerName)
}
